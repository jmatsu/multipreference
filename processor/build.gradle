buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.0'
    }
}


apply plugin: 'kotlin'

apply plugin: 'org.junit.platform.gradle.plugin'

junitPlatform {
    filters {
        engines {
            include 'spek'
        }
    }
}

sourceSets {
    main.java.srcDirs += project(":library").file("src/main/java")
    test.java.srcDirs += project(":library").file("src/test/java")
}

def androidJarLocation() {
    def sdkDir = System.getenv("ANDROID_HOME")

    if (sdkDir != null) {
        return "$sdkDir/platforms/android-${config.compileSdkVersion}/android.jar"
    }

    def localProperties = new File(rootDir, "local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr ->
            properties.load(instr)
        }
        return "${properties.getProperty('sdk.dir')}/platforms/android-${config.compileSdkVersion}/android.jar"
    }

    throw new AssertionError("Need to set ANDROID_HOME or prepare local.properties")
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"

    implementation "androidx.annotation:annotation:1.1.0"

    implementation "com.squareup:javapoet:$javapoetVersion"
    implementation "com.google.guava:guava:$guavaVersion"

    compileOnly files(androidJarLocation())
    runtimeOnly "com.google.android:android:$androidVersion"

    testImplementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"
    testImplementation "org.mockito:mockito-core:3.7.7"
    testImplementation "org.jetbrains.spek:spek-api:$spekVersion"
    testImplementation "org.jetbrains.spek:spek-junit-platform-engine:$spekVersion"

    testImplementation "org.robolectric:robolectric:$robolectricVersion"
    testImplementation files(androidJarLocation())
    testImplementation "junit:junit:$junitVersion"
}

task sourcesJar(type: Jar) {
    from sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

afterEvaluate {
    publishing {
        repositories {
            maven {
                url = repoUrl

                credentials(PasswordCredentials) {
                    username = repoUsername
                    password = repoPassowrd
                }
            }
        }

        publications {
            maven(MavenPublication) {
                from components.java

                groupId = artifactConfig.groupId
                artifactId = artifactConfig.processorArtifactId
                version = rootProject.ext.releaseVersion

                pom {
                    name = artifactConfig.processorDisplayName
                    description = artifactConfig.description
                    url = artifactConfig.websiteUrl
                    licenses {
                        license {
                            name = "The Apache Software License, Version 2.0"
                            url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                            distribution = "repo"
                        }
                    }
                    developers {
                        developer {
                            name = "Jumpei Matsuda"
                        }
                    }
                    scm {
                        url = artifactConfig.websiteUrl
                    }
                }
            }
        }
    }
}