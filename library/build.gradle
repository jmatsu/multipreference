buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android' // only for testing

android {
    compileSdkVersion config.compileSdkVersion

    defaultConfig {
        minSdkVersion config.minSdkVersion
        targetSdkVersion config.targetSdkVersion
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_6
        targetCompatibility JavaVersion.VERSION_1_6
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }
}

dependencies {
    implementation "androidx.annotation:annotation:1.1.0"

    testImplementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"
    testImplementation "junit:junit:$junitVersion"
    testImplementation "org.robolectric:robolectric:$robolectricVersion"
    testImplementation "org.mockito:mockito-core:3.7.7"
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

def publicationVariants = ['release']

android.libraryVariants.configureEach { variant ->
    if (publicationVariants.contains(variant.name)) {
        project.task("generateJavadocFor${variant.name.capitalize()}Publication", type: Javadoc) {
            source = variant.getJavaCompileProvider().get().source
            classpath = variant.getJavaCompileProvider().get().classpath + files(project.android.getBootClasspath())
            options.linkSource true
        }

        project.task("generateSourcesJarFor${variant.name.capitalize()}Publication", type: Jar) {
            archiveClassifier.set('sources')
            from variant.sourceSets.collect { it.javaDirectories }.flatten()
        }

        project.task("generateJavadocsJarFor${variant.name.capitalize()}Publication", type: Jar) {
            archiveClassifier.set('javadoc')
            from files(tasks.getByName("generateJavadocFor${variant.name.capitalize()}Publication"))
        }

        project.tasks.findByName("assemble${variant.name.capitalize()}").dependsOn(
                "generateSourcesJarFor${variant.name.capitalize()}Publication",
                "generateJavadocsJarFor${variant.name.capitalize()}Publication",
                "generatePomFileFor${variant.name.capitalize()}Publication"
        )
    }
}

afterEvaluate {
    publishing {
        repositories {
            maven {
                url = repoUrl

                credentials(PasswordCredentials) {
                    username = repoUsername
                    password = repoPassowrd
                }
            }
        }

        publications {
            release(MavenPublication) {
                from components.release
                artifact generateSourcesJarForReleasePublication
                artifact generateJavadocsJarForReleasePublication

                groupId = artifactConfig.groupId
                artifactId = artifactConfig.libraryArtifactId
                version = rootProject.ext.releaseVersion

                pom {
                    name = artifactConfig.libraryDisplayName
                    description = artifactConfig.description
                    url = artifactConfig.websiteUrl
                    licenses {
                        license {
                            name = "The Apache Software License, Version 2.0"
                            url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                            distribution = "repo"
                        }
                    }
                    developers {
                        developer {
                            name = "Jumpei Matsuda"
                        }
                    }
                    scm {
                        url = artifactConfig.websiteUrl
                    }
                }
            }
        }
    }
}